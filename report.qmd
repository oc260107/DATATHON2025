---
title: "report"
format:
  html:
    embed-resources: true
    toc: true
    code-fold: true
    footnotes-hover: true
    theme: 
      light: [flatly, cerulean]
      dark: darkly 
---

```{r}
data = read.csv("cleaning_data.csv")
library(mgcv)
library(ggplot2)
library(knitr)
library(kableExtra)
library(reshape2)
library(dplyr)
```

```{r}

data <- data %>% select("traffic_congestion_level",
    "warehouse_inventory_level",
    "loading_unloading_time",
    "historical_demand",
    "handling_equipment_availability",
    "weather_condition_severity",
    "port_congestion_level",
    "customs_clearance_time",
    "route_risk_level",
    "delay_probability")

corr <- cor(data[sapply(data, is.numeric)], use="complete.obs")

melted_corr <- melt(corr)

ggplot(melted_corr, aes(x=Var1, y=Var2, fill=value)) +
  geom_tile(color="grey50", size=0.5) +  
  scale_fill_gradient2(low="blue", mid="white", high="red", midpoint=0, limit=c(-1,1), name="Correlation") +
  theme_minimal(base_size = 12) +
  labs(title="Correlation Heatmap") +
  theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1, face="bold"),
        axis.text.y = element_text(face="bold"),
        panel.grid = element_blank(),
        plot.title = element_text(hjust=0.5, face="bold")) +
  coord_fixed()
```

```{r}
df <- data %>% 
  select(traffic_congestion_level, 
         warehouse_inventory_level,
         loading_unloading_time,
         historical_demand,
         handling_equipment_availability,
         weather_condition_severity,
         port_congestion_level,
         customs_clearance_time,
         route_risk_level,
         delay_probability)

lm_model <- lm(delay_probability ~ traffic_congestion_level + 
                                 warehouse_inventory_level +
                                 loading_unloading_time +
                                 historical_demand +
                                 handling_equipment_availability +
                                 weather_condition_severity +
                                 port_congestion_level +
                                 customs_clearance_time +
                                 route_risk_level, 
               data = df)


summary(lm_model)
```

```{r}
par(mfrow = c(1,2))  

plot(lm_model$fitted.values, lm_model$residuals,
     xlab = "Fitted values",
     ylab = "Residuals",
     main = "Residuals vs Fitted")
abline(h = 0, col = "blue", lwd = 2, lty = 1)  

qqnorm(lm_model$residuals, main = "Normal Q-Q")
qqline(lm_model$residuals, col = "blue", lwd = 2, lty = 1)
```

```{r}
numeric_vars <- c("traffic_congestion_level", "warehouse_inventory_level",
                  "loading_unloading_time", "historical_demand",
                  "weather_condition_severity", "port_congestion_level",
                  "customs_clearance_time", "route_risk_level")

gam_results <- data.frame(Variable = character(),
                          edf = numeric(),
                          F_value = numeric(),
                          p_value = numeric(),
                          stringsAsFactors = FALSE)

formula_all <- as.formula(paste(
  "delay_probability ~",
  paste0("s(", numeric_vars, ", k=10)", collapse = " + ")
))

gam_model_all <- gam(formula_all, data = df, method = "REML")

smooth_summary <- summary(gam_model_all)$s.table
for (i in 1:nrow(smooth_summary)) {
  gam_results <- rbind(gam_results,
                       data.frame(Variable = rownames(smooth_summary)[i],
                                  edf = smooth_summary[i, "edf"],
                                  F_value = smooth_summary[i, "F"],
                                  p_value = smooth_summary[i, "p-value"]))
}

gam_results %>%
  kable(format = "html", caption = "GAM Smooth Term Test Results (numeric only)") %>%
  kable_styling(full_width = F, bootstrap_options = c("striped", "hover", "condensed")) %>%
  column_spec(1, bold = TRUE) %>%
  column_spec(2:4, color = "black")

for (var in numeric_vars) {
  plot(gam_model_all, select = which(numeric_vars == var), se = TRUE, rug = TRUE,
       main = paste("GAM for", var))
}

```

```{r}
qqnorm(df$delay_probability[df$handling_equipment_availability == 0])
qqline(df$delay_probability[df$handling_equipment_availability == 0])

qqnorm(df$delay_probability[df$handling_equipment_availability == 1])
qqline(df$delay_probability[df$handling_equipment_availability == 1])

```

```{r}
group0 <- df$delay_probability[df$handling_equipment_availability == 0]
group1 <- df$delay_probability[df$handling_equipment_availability == 1]

ks_result <- ks.test(group0, group1)

u_result <- wilcox.test(group0, group1, exact = FALSE)

ks_result
u_result
```

```{r}
library(randomForest)

target <- "delay_probability"
features <- c("handling_equipment_availability",
              "traffic_congestion_level", "warehouse_inventory_level",
              "loading_unloading_time", "historical_demand",
              "weather_condition_severity", "port_congestion_level",
              "customs_clearance_time", "route_risk_level")

rf_formula <- as.formula(paste(target, "~", paste(features, collapse = " + ")))

set.seed(123)
rf_model <- randomForest(rf_formula, data = df, ntree = 200, importance = TRUE)

print(rf_model)

importance(rf_model)
varImpPlot(rf_model)

```

=
